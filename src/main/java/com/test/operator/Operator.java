package com.test.operator;
/**
 * 运算符
 * */
public class Operator {

  /**
   * Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。
   * 位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：
   * A = 0011 1100
   * B = 0000 1101
   * -----------------
   * A&b = 0000 1100
   * A | B = 0011 1101
   * A ^ B = 0011 0001
   * ~A= 1100 0011
   * ＆     如果相对应位都是1，则结果为1，否则为0    （A＆B），得到12，即0000 1100
   *   |     如果相对应位都是0，则结果为0，否则为1    （A | B）得到61，即 0011 1101
   *   ^     如果相对应位值相同，则结果为0，否则为1    （A ^ B）得到49，即 0011 0001
   *   〜     按位补运算符翻转操作数的每一位，即0变成1，1变成0。 （〜A）得到-61，即1100 0011
   *   <<    按位左移运算符。左操作数按位左移右操作数指定的位数。  A << 2得到240，即 1111 0000
   *   >>    按位右移运算符。左操作数按位右移右操作数指定的位数。  A >> 2得到15即 1111
   *   >>>   按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。   A>>>2得到15即0000 1111
   *
   * 赋值运算：
   *     =       简单的赋值运算符，将右操作数的值赋给左侧操作数   C = A + B将把A + B得到的值赋给C
   *   + =     加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数  C + = A等价于C = C + A
   *   - =     减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数 C -= A等价于C = C -A
   *   * =     乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数  C * = A等价于C = C * A
   *   / =     除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数  C / = A等价于C = C / A
   *   （％）=  取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数  C％= A等价于C = C％A
   *   << =    左移位赋值运算符  C << = 2等价于C = C << 2
   *   >> =    右移位赋值运算符  C >> = 2等价于C = C >> 2
   *   ＆=      按位与赋值运算符  C＆= 2等价于C = C＆2
   *   ^ =     按位异或赋值操作符 C ^ = 2等价于C = C ^ 2
   *   | =     按位或赋值操作符  C | = 2等价于C = C | 2
   *
   * 运算优先级  由高到低
   * 类别      操作符                   关联性
   * 后缀       () [] . (点操作符)      左到右
   * 一元       + + - ！〜             从右到左
   * 乘性       * /％                  左到右
   * 加性       + -                   左到右
   * 移位       >> >>>  <<            左到右
   * 关系       >> = << =             左到右
   * 相等       ==  !=                左到右
   * 按位与      ＆                    左到右
   * 按位异或         ^                左到右
   * 按位或      |                     左到右
   * 逻辑与      &&                    左到右
   * 逻辑或      | |                   左到右
   * 条件        ？：                  从右到左
   * 赋值        = + = - = * = / =％= >> = << =＆= ^ = | =   从右到左
   * 逗号        ，                    左到右
   * */


  public static void main(String[] args) {
    /** 符号为:最高位同时表示图号，0为正数，1为负数 */

        /**
            1、二进制转换为十进制

            二进制转换为10进制的规律为： 每位的值 * 2的（当前位-1次方）
            例如：
                00000001 = 0 * 2^7 + 0 * 2^6 + 0 * 2^5 + 0 * 2^4 + 0 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0  = 1
                00000010 = 0 * 2^7 + 0 * 2^6 + 0 * 2^5 + 0 * 2^4 + 0 * 2^3 + 0 * 2^2 + 1 * 2^1 + 0 * 2^0  = 2

                2左移2位： 2<<2 -> 00001000 -> 0 * 2^7 + 0 * 2^6 + 0 * 2^5 + 0 * 2^4 + 1 * 2^3 + 0 * 2^2 + 0 * 2^1 + 0 * 2^0 = 8

            2、二进制的符号位：
                最高位表示符号位，0表示正数  ， 1表示负数


            3、将二进制负数转换为十进制：先对该二进制数取反，然后加1，再转换为十进制，然后在前面加上负号
                例如： 10101011 最高位为1，所以为负数
                   第一步：取反： 01010100
                   第二步：加1 ： 01010101
                   第三步：转换为10进制：85
                   第四步：加上负号： -85
                   所以      10101011 转换为十进制为 -85

            4、将十进制负数转换为二进制：先得到该十进制负数的绝对值，然后转换为二进制，然后将该二进制取反，然后加1
                例如：-85
                第一步：得到绝对值 85
                第二步：转换为二进制：01010101
                第二步：取反：                10101010
                第三步：加1：                 10101011
                所以，-85转换为二进制为  10101011
         */

        /**
        ~ ‘非’ 运算符是将目标数的进制去反，即0变成1 ，1变成0
        2的二进制码为 00000010 ， 它取反为11111101 ，可见取反后结果为负数（二进制负数转换为十进制的步骤为：将二进制去反，然后+1）
         将 11111101 转换为10进制 ，第一步去反 得到 00000010 然后 加1 得到 00000011 ，得到的结果为3 ，然后在前面加上负号就可以了
         所以结果为-3
         */
    System.out.println(~2);

        /**
          ^ 异或 ，计算方式为：两个二进制数的位相同则为0 不同则为1
          23转换为二进制为：00010111
          12转换为二进制为：00001100
                    计算结果为：00011011  =  27
         */
    System.out.println(23 ^ 12);

        /**
         & 按位与 ，计算方式为：两个二进制数的位都为1则为1 ，否则为0
         1的二进制为 ：00000001
         2的二进制为 ：00000010
              结果为 :00000000 = 0
         */
    System.out.println(1&2);

        /**
          | 按位或 ，计算方式为：两个二进制位有一个为1就为1，否者为0
          5 的二进制为：00000101
          6 的二进制为：00000110
                  结果为：00000111 = 7
         */
    System.out.println( 5 | 6);


        /**
          >> 有符号右移位  ，符号左边表示要被移位的数，右边表示需要移的位数，结果为正数则在左边补0，否则补1
          3 的二进制为：00000010
                向右移动1位：00000001 = 1
         */
    System.out.println(3 >> 1);

    //十进制转二进制
    int n = 2;
    String binary = Integer.toBinaryString(n);

    //二进制转十进制
    int b = Integer.parseInt(binary,2);

    System.out.printf("十进制转二进制结果为：%s, 二进制转十进制结果为： %s",binary,b);

  }
}
